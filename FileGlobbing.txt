Before executing commands that you enter, the shell first performs expansions on them, and one of these expansions is globbing. 
Globbing lets you reference files without typing them all out, or typing out their full paths.

* - When it encounters a * character in any argument, the shell will treat it as "wildcard" and try to replace that argument with any files that match the pattern.

                hacker@dojo:~$ touch file_a
                hacker@dojo:~$ touch file_b
                hacker@dojo:~$ touch file_c
                hacker@dojo:~$ ls
                file_a	file_b	file_c
                hacker@dojo:~$ echo Look: file_*
                Look: file_a file_b file_c
        
        When zero files are matched, by default, the shell leaves the glob unchanged:
        
                hacker@dojo:~$ touch file_a
                hacker@dojo:~$ ls
                file_a
                hacker@dojo:~$ echo Look: nope_*
                Look: nope_*
        
        The * matches any part of the filename except for / or a leading . character. For example:
                
                hacker@dojo:~$ echo ONE: /ho*/*ck*
                ONE: /home/hacker
                hacker@dojo:~$ echo TWO: /*/hacker
                TWO: /home/hacker
                hacker@dojo:~$ echo THREE: ../*
                THREE: ../hacker

? - When it encounters a ? character in any argument, the shell will treat it as single-character wildcard. This works like *, but only matches one character.

                hacker@dojo:~$ ls
                file_a	file_b	file_cc
                hacker@dojo:~$ echo Look: file_?
                Look: file_a file_b
                hacker@dojo:~$ echo Look: file_??
                Look: file_cc

[]- a wildcard for some subset of potential characters, specified within the brackets. For example, [pwn] will match the character p, w, or n. it can also work with paths.

                hacker@dojo:~$ ls
                file_a	file_b	file_c
                hacker@dojo:~$ echo Look: /home/hacker/file_[ab]
                Look: /home/hacker/file_a /home/hacker/file_b

If the first character in the brackets is a ! or (in newer versions of bash) a ^, the glob inverts, and that bracket instance matches characters that aren't listed.

                hacker@dojo:~$ ls
                file_a	file_b	file_c
                hacker@dojo:~$ echo Look: file_[!ab]
                Look: file_c
                hacker@dojo:~$ echo Look: file_[^ab]
                Look: file_c
                hacker@dojo:~$ echo Look: file_[ab]
                Look: file_a file_b
